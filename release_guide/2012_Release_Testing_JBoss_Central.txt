

2012: Working Cross-Team Pad: SOA/BRMS/JBDS Build CheatSheet
-- PUT QUESTIONS/ANSWERS HERE
-- ALSO ACCUMULATE QUESTIONS Newcastle MEETING
   * https://docspace.corp.redhat.com/docs/DOC-9189
WORKFLOW: Providing patches/fixes for Teiid in JBDS 4.x
Context: Teiid is broken again, and GSS needs a fix for a customer
Example: Teiid 7.1.1, 7.4.3

    0. GSS notifies jbds-pm-list@ of the issue. JIRAs are opened against TEIIDDES, JBIDE, JBDS as appropriate (depending on scope of the problem)

    1. GSS/QE/PM/releng decide the urgency, supportedness, and therefore delivery mechanism of the fix

    Example 1: one-off high-risk "hacky" patch 

    NOT a rebuild -- just an ad-hoc patch

    Limited testing only (may never in fact happen; May differ from ultimate patch)

    posted to CSP or sent via zip directly to customer

    Example 2: cumulative patch to Teiid 7.4.3 -> 7.4.4

    rebuild of Teiid update site using Jenkins (1 job)

    SUPPORTED

    posted to JBDS update site as "optional on-demand install"

    happened for Teiid 7.1.0 -> 7.1.1 (released between JBDS 4.0.0 and 4.1.0)

    could also be sent via zip directly to customer if not posted to devstudio.jboss.com

    Example 3: cumulative patch to JBDS 4.1.2 -> 4.1.3 (incl. Teiid 7.4.3 -> 7.4.4)

    rebuild of JBDS + Teiid update sites using Jenkins (3 jobs)

    SUPPORTED and EXTENSIVELY TESTED (not including installer respin)

    posted to JBDS update site as "automatic discoverable install"

    Example 4: cumulative patch to JBDS 4.1.2 -> 4.1.3 (incl. Teiid 7.4.3 -> 7.4.4)

    rebuild of JBDS + Teiid update sites & installer using Jenkins (3 jobs)

    SUPPORTED and EXTENSIVELY TESTED (including installer)

    posted to JBDS update site as "automatic discoverable install" and installers updated in CSP

    happened for Teiid 7.4.2 -> 7.4.3 in JBDS 4.1.1 -> 4.1.2

    2. GSS/Dev implements the fix, ensuring that all affected plugins/features are correctly upversioned in Teiid and (if applicable) in JBDS. GSS/Dev will monitor the job(s) and should end up with blue balls. Jobs turned on to do the respin are once again disabled when done.

    3. When build job(s) are complete, GSS notifies QE and testing begins. (Leverage existing "Support Patch" Jira workflow if possible.)

    4. When QE passes, releng (Nick or Doug) is notified and bits are published to update site [1].  (Leverage existing "Support Patch" Jira workflow if possible.)  Bits destined for CSP are reported to Chris via release-engineering@redhat.com [2]

    [1] https://svn.jboss.org/repos/devstudio/trunk/documentation/Release_Guide/Releng_And_Release_Guide.pdf.Chapter.8.Release.addenda_2011-JBDS-Staging.txt

    [2] https://svn.jboss.org/repos/devstudio/trunk/documentation/Release_Guide/Releng_And_Release_Guide.pdf.Chapter.8.Release.server-owners-and-helpdesk-tickets.txt

WORKFLOW: How to test JBoss Central (a local instance pointing at the correct update site)

    Existing test - connect to extras update site install everything

    New test - perform the same test through Central

    Plan is to have customers (starting with 5.0) to only use Central to perform updates - updste site will still be there - and will be accessed by Central - but we want users using Central.

 

    https://issues.jboss.org/browse/JBDS-1959 

    Central is a unique QE challenge because:

    directory.xml -> points at discovery_plugin.jar -> contains plugin.xml -> references a specific update site from which JBDS SOA features are installed

    So during a branch / QE cycle we need to allow QE users to test from the correct xml / plugin / site triplet, but also have that the resulting code not need to change AFTER we publish from staging/development to release/earlyaccess 

    Testing the same code - but it is referenced from a different URL

    After testing is complete - the URL must be changed in .xml in the plugin - better to externalize someday

    Start up JBDS - over-ride Central URL - need to keep this straight - or else old bits will be used - or a non-existent site will be referenced:

    ./jbdevstudio -vmargs -Ddirectory.xml=http://qe.site.for.testing/some.other.file.xml   
     -Dsoa.site=http://qe.site.for.testing/soa.bits.from.current.milestone.in.progress

    Issue - Central is in core and references SOA - SOA must therefore be released the same time as core - OR ELSE - we need to change JBDS Central discovery plugin's plugin.xml to not reference SOA

    How will a user get this update? Must the user install/update the plugin? Nope - they can simply refresh Central.

    So - we need to tell the user to refresh - email message to them? as not everyone refreshes/restarts daily. Maybe when SOA 5.3 ships?

WORKFLOW: Integrating a new Extras Site / Central dependency
Context: A new release of an upstream THIRD PARTY component becomes available
Example: Spring 2.8

    0. PRD / ERD is updated to include new requirement

    1. PM informs Nick or Doug of need to include something new in Extras or Central

    Example: https://issues.jboss.org/browse/JBDS-1925

    2. Contact legal to verify license allows redistribution

    3. Ensure Max, Burr, Len, Rodney, Mark approve

    4. Collect upstream dep into mirror on download.jboss.org IF LICENSE ALLOWS

    5. If license does not permit redistribution/hosting (eg., JRebel - https://issues.jboss.org/browse/JBDS-1946) then linking will allowed via Central -- CANNOT BE INCLUDED on Extras site

    6. Update central discovery plugin.xml and/or update JBDS Extras site.xml to include new dependency

    7. Respin JBDS updatesite builds, eg., https://jenkins.mw.lab.eng.bos.redhat.com/hudson/job/devstudio-5.0_stable_branch.updatesite/

WORKFLOW: Integrating a new target platform dependency
Context: A new community release of an upstream THIRD PARTY component becomes available
Example: JBoss Tools 3.3 requires Google Plugin For Eclipse

    1. Developer who needs the new req informs Nick & Max of need to update

    Example: https://issues.jboss.org/browse/JBIDE-10595

    2. Legal (Rich Fontana) MUST APPROVE license terms for redistribution/hosting

    3. Max approves change to target platform

    4. 24hr notice is sent to 3 mailing lists - external-exadel, jboss-dev, jbds-pm

    5. Collect upstream dep into mirror on download.jboss.org, eg.

    http://download.jboss.org/jbosstools/updates/requirements/gwt/  (see build.xml script in this folder) -- note that this is done on  dev01.mw server (to save bandwidth) and then rsync/sftp'd to  download.jboss.org

    6. Composite new version of dep into latest site, eg: http://download.jboss.org/jbosstools/updates/indigo/SR1-M/compositeArtifacts.xml or http://download.jboss.org/jbosstools/updates/indigo/extras/SR1a/compositeArtifacts.xml

    7. Committed to SVN then push to dl.jb.org server via Jenkins job or rsync/sftp: https://jenkins.mw.lab.eng.bos.redhat.com/hudson/view/DevStudio/view/DevStudio_All/job/jbosstools-download.jboss.org-rsync-from-svn/

    8. Build target platform(s), eg., https://jenkins.mw.lab.eng.bos.redhat.com/hudson/job/jbosstools-3.3_trunk.target-platform/ (there are currently 4 TP jobs for JBT3.3/JBDS5)

    9. Developer updates plugins' manifests to reference updated dependencies

WORKFLOW: Integrating a new version of an existing target platform dependency
Context: A new community release of an upstream THIRD PARTY component becomes available
Example: JBoss Tools 3.3 requires eGit 1.2

    1. Developer who needs the new req informs Nick & Max of need to update

    Example: https://issues.jboss.org/browse/JBIDE-10307

    2. Max approves change to target platform

    3. 24hr notice is sent to 3 mailing lists - external-exadel, jboss-dev, jbds-pm

    4. Collect upstream dep into mirror on download.jboss.org, eg.

    http://download.jboss.org/jbosstools/updates/requirements/egit/ (see build.xml script in this folder) -- note that this is done on dev01.mw server (to save bandwidth) and then rsync/sftp'd to download.jboss.org

    5. Composite new version of dep into latest site, eg: http://download.jboss.org/jbosstools/updates/indigo/SR1-M/compositeArtifacts.xml or http://download.jboss.org/jbosstools/updates/indigo/extras/SR1a/compositeArtifacts.xml

    6. Committed to SVN then push to dl.jb.org server via Jenkins job or rsync/sftp: https://jenkins.mw.lab.eng.bos.redhat.com/hudson/view/DevStudio/view/DevStudio_All/job/jbosstools-download.jboss.org-rsync-from-svn/

    7. Build target platform(s), eg., https://jenkins.mw.lab.eng.bos.redhat.com/hudson/job/jbosstools-3.3_trunk.target-platform/ (there are currently 4 TP jobs for JBT3.3/JBDS5)

    8. Developer updates plugins' manifests to reference updated dependencies

WORKFLOW: Integrating a new version of an existing component
Context: A new community release of an upstream jboss.org component becomes available
Example: JBoss Tools 3.2 includes drools 5.2.1 and JBoss Tools 3.3 needs to upgrade to drools 5.3.1 (and later maybe 5.4.0.Beta1 or even 5.4.0-SNAPSHOT)

    1. Component owner or PM informs Doug/GeoffM of need to update

    Preferred: Component owner opens JBIDE jira to announce change is needed

    Example: https://issues.jboss.org/browse/JBIDE-10720

    2. New job(s) created (clone existing) to pull in content from a new branch/tag/repo. Need 1 for trunk & 1 for stable_branch (current milestone)

    3. Update composite metadata to include new content from new staging site

    4. JBT SOA aggregate build is respun

    5. JBDS SOA aggregate build is respun (if applicable - JBDS may not yet contain new component)

    6. Push bits to staging, notify QE

Background:

    What impact it would have to use the productized runtime with community tooling?

    The question is really irrelevant as -  the tooling only exists in the community -  all bug fixing and updates happen in the community - the builds happen  in the community - and then selected builds are pulled into JBDS - diff model than the Platforms

    But - how to keep them in synch? 

    Drools in BRMS has strict requirements for version compatibility.

    The current state of Drools code is that, in order for consumers understanding the binary format of the producers, they need to be the exact same binary build. (Emphasis placed on the "exact same binary.") [this is wy instead of rebuilding Drools tooling, we just adopt what they publish. it's on their head to maintain compatibility, do maintenance, etc. - ~nboldt]

    The Drools tooling, when built, contains some of the Drools core JAR files. So, in order for the tooling to work, these JAR files also need to be of the exact same version as the ones that we ship in a product.

WORKFLOW: Integrating a new component (eg., to support a new runtime)
Context: A new community jboss.org component is available
Example: SwitchYard 0.3.0 released, 0.4.0 in development

    0. PRD / ERD is updated to include new requirement, if we plan to ship the component in JBDS. Legal approval is obtained for redistribution (ie., license terms are vetted for compatibility - is the component GPL, EPL, ASL, WTFPL?)

    1. Component owner or PM informs Doug/GeoffM of need to include new project

    Preferred: Component owner opens JBIDE jira to announce change is needed

    Example: https://issues.jboss.org/browse/JBIDE-10672

    2. New jobs created (if needed). Need 1 for trunk & 1 for stable_branch (milestone)

    3. Update composite metadata to include new content from new staging site

    4. JBT SOA aggregate build is respun

    5. JBDS SOA aggregate build is respun (if applicable - JBDS may not yet contain new component)

    6. Push bits to staging, notify QE


